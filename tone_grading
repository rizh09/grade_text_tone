import sys
import nltk
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import LinearSVC

def grade_text_tone(email_text):
    # Criteria for grading the text tone
    formal_words = ["sir", "madam", "please", "thank you"]
    friendly_words = ["hi", "hello", "thanks", "cheers"]
    assertive_words = ["must", "need", "demand", "immediately"]

    # Combine the criteria words into categories
    categories = {
        "Formal Tone": formal_words,
        "Friendly Tone": friendly_words,
        "Assertive Tone": assertive_words
    }

    # Prepare the training data
    train_data = []
    train_labels = []
    for category, words in categories.items():
        train_data.extend(words)
        train_labels.extend([category] * len(words))

    # Create a TF-IDF vectorizer
    vectorizer = TfidfVectorizer()
    train_vectors = vectorizer.fit_transform(train_data)

    # Train a linear SVM classifier
    classifier = LinearSVC()
    classifier.fit(train_vectors, train_labels)

    # Transform the input email text into a vector
    test_vector = vectorizer.transform([email_text])

    # Predict the tone using the trained classifier
    predicted_label = classifier.predict(test_vector)

    return predicted_label[0]

# Get the email text from command line input
email_text = input("Enter the email text: ")

# Grade the text tone using machine learning
tone = grade_text_tone(email_text)
print("Email Tone:", tone)
